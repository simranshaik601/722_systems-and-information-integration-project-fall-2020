----- THERE ARE 8 CASES WHERE TO SHOW CASE OUR PRODUCTS INTEGRUM SYSTEM IS GOOD----

--Case 1:  Search for all books that have been authored by a specific author of your choice

SET SERVEROUTPUT ON;
DROP TABLE MY_TEMP_TABLE;
DROP TABLE RESULTS_TEMP;
DROP TABLE RESULTS_TEMP1;
DROP TABLE RESULTS_TEMP2;
DROP TABLE RESULTS_TEMP3;

CREATE TABLE my_temp_table (
  TOKEN_ID INT,
  TOKEN     VARCHAR2(200),
  DESCRIPT  VARCHAR2(300)
);

DROP TABLE METADATA_LAYER_TEMP;

create table metadata_layer_temp(
cannonical_representation varchar2(100),
db1_column_name varchar2(100),
db1_column_data_type varchar2(100),
db1_function_name varchar2(100),
db2_column_name varchar2(100),
db2_column_data_type varchar2(100),
db2_function_name varchar2(100),
db3_column_name varchar2(100),
db3_column_data_type varchar2(100),
db3_function_name varchar2(100),
db4_column_name varchar2(100),
db4_column_data_type varchar2(100),
db4_function_name varchar2(100)
);
/
DECLARE
QUERYZ VARCHAR2 (400) :='SELECT book_title FROM books_db WHERE author_first = ''Philip''';
TOKENS VARCHAR(300);
BEGIN
FOR TOKEN IN (SELECT REGEXP_SUBSTR(QUERYZ,'[^ |,]+',1,LEVEL) TEXTS FROM DUAL
CONNECT BY REGEXP_SUBSTR(QUERYZ,' ',1,LEVEL-1) IS NOT NULL)
LOOP
TOKENS := TOKEN.TEXTS;
INSERT INTO MY_TEMP_TABLE (TOKEN) VALUES(TOKENS);
DBMS_OUTPUT.PUT_LINE(TOKENS);
END LOOP;
END;
/

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'KEYWORD'
WHERE EXISTS (SELECT KEYWORD FROM KEYWORD_TABLE WHERE MY_TEMP_TABLE.TOKEN = KEYWORD_TABLE.KEYWORD);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'TOKEN'
WHERE NOT EXISTS (SELECT KEYWORD FROM KEYWORD_TABLE WHERE MY_TEMP_TABLE.TOKEN = KEYWORD_TABLE.KEYWORD);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'OPERATOR'
WHERE EXISTS (SELECT OPERATOR1 FROM OPERATORS WHERE MY_TEMP_TABLE.TOKEN = OPERATORS.OPERATOR1);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'CONDITION' WHERE DESCRIPT = 'TOKEN' AND
NOT EXISTS (SELECT CANNONICAL_REPRESENTATION FROM METADATA_LAYER WHERE MY_TEMP_TABLE.TOKEN = METADATA_LAYER.CANNONICAL_REPRESENTATION);

DECLARE
V_NAME varchar2(200);
SQL_SMT VARCHAR2(600);
CURSOR MY_CURSOR IS
SELECT TOKEN FROM MY_TEMP_TABLE WHERE DESCRIPT = 'TOKEN';
BEGIN
SQL_SMT := 'INSERT INTO METADATA_LAYER_TEMP SELECT * FROM METADATA_LAYER WHERE :DRIP IN (CANNONICAL_REPRESENTATION,DB1_COLUMN_NAME,DB1_COLUMN_DATA_TYPE,DB1_FUNCTION_NAME,DB2_COLUMN_NAME,DB2_COLUMN_DATA_TYPE,
DB2_FUNCTION_NAME,DB3_COLUMN_NAME,DB3_COLUMN_DATA_TYPE,DB3_FUNCTION_NAME,DB4_COLUMN_NAME,DB4_COLUMN_DATA_TYPE,DB4_FUNCTION_NAME)';
OPEN MY_CURSOR;
LOOP
FETCH MY_CURSOR INTO V_NAME;
EXECUTE IMMEDIATE SQL_SMT USING V_NAME;
EXIT WHEN MY_CURSOR%NOTFOUND;
END LOOP;
CLOSE MY_CURSOR;
END;
/

DELETE FROM
   METADATA_LAYER_TEMP A
WHERE
  a.rowid >
   ANY (
     SELECT
        B.rowid
     FROM
        METADATA_LAYER_TEMP B
     WHERE
        a.cannonical_representation = b.cannonical_representation
     AND
        a.cannonical_representation = b.cannonical_representation
        );

UPDATE MY_TEMP_TABLE SET TOKEN_ID = ROWNUM;

DROP TABLE METADATA_LAYER_TEMP1;

CREATE TABLE METADATA_LAYER_TEMP1 AS (SELECT MY_TEMP_TABLE.*,METADATA_LAYER_TEMP.* FROM MY_TEMP_TABLE LEFT JOIN METADATA_LAYER_TEMP ON MY_TEMP_TABLE.TOKEN = METADATA_LAYER_TEMP.CANNONICAL_REPRESENTATION);


DROP TABLE RESULTS_TABLE1;
CREATE TABLE RESULTS_TABLE1(RESULTS_X VARCHAR2(200),RESULTS_Y VARCHAR2(200));
--single column query--
DECLARE
TYPE OVERSEAS_DRIP IS TABLE OF VARCHAR2(200);
TYPE OVERSEAS_DRIP2 IS TABLE OF VARCHAR2(200);
FDRIP OVERSEAS_DRIP;
FDRIP2 OVERSEAS_DRIP2;
DB1_COL METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2_COL METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3_COL METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4_COL METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_COLS1 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB2_COLS1 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB3_COLS1 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB4_COLS1 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB1 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_COL2 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2_COL2 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3_COL2 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4_COL2 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
OP MY_TEMP_TABLE.TOKEN%TYPE DEFAULT 'DRIP';
COND MY_TEMP_TABLE.TOKEN%TYPE;
STR VARCHAR2(1000);
MYSTR VARCHAR2(1000);
STR1 VARCHAR2(1000);
MYSTR1 VARCHAR2(1000);
STR2 VARCHAR2(1000);
MYSTR2 VARCHAR2(1000);
STR3 VARCHAR2(1000);
MYSTR3 VARCHAR2(1000);
STR5 VARCHAR2(1000);
STR6 VARCHAR2(1000);
STR7 VARCHAR2(1000);
STR8 VARCHAR2(10000);
BEGIN
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COL,DB2_COL,DB3_COL,DB4_COL
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id = 2;
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1,DB2,DB3,DB4
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE = 'table';
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COL2,DB2_COL2,DB3_COL2,DB4_COL2
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id != 2;
SELECT TOKEN
INTO OP
FROM MY_TEMP_TABLE WHERE DESCRIPT = 'OPERATOR';
SELECT TOKEN
INTO COND
FROM MY_TEMP_TABLE WHERE DESCRIPT = 'CONDITION';
IF DB1_COL != 'null' THEN
STR := 'SELECT ' || DB1_COL || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || ' ' || OP || ' ' || "COND";
--STR5 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB1_COL || ',' || DB1_COLS1 || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || OP || "COND";
MYSTR := 'CREATE TABLE RESULTS_TEMP AS ' || STR;
EXECUTE IMMEDIATE STR BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR5;
EXECUTE IMMEDIATE MYSTR;
DBMS_OUTPUT.PUT_LINE(STR);
ELSE DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
MYSTR := 'CREATE TABLE RESULTS_TEMP (COL1 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR;
END IF;
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
STR1 := 'SELECT ' || DB2_COL || ' FROM ' || DB2 || ' WHERE ' || DB2_COL2 || ' ' || OP || ' ' || "COND";
--STR6 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB2_COL || ',' || DB2_COLS1 || ' FROM ' || DB2 || ' WHERE ' || DB2_COL2 || OP || "COND";
MYSTR1 := 'CREATE TABLE RESULTS_TEMP1 AS ' || STR1;
IF DB2_COL != 'null' THEN
EXECUTE IMMEDIATE STR1 BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR6;
EXECUTE IMMEDIATE MYSTR1;
DBMS_OUTPUT.PUT_LINE(STR1);
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
ELSE
MYSTR1 := 'CREATE TABLE RESULTS_TEMP1 (COL1 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR1;
DBMS_OUTPUT.PUT_LINE(STR1);
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
STR2 := 'SELECT ' || DB3_COL || ' FROM ' || DB3 || ' WHERE ' || DB3_COL2 || ' ' || OP || ' ' || "COND";
--STR7 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB3_COL || ',' || DB3_COLS1 || ' FROM ' || DB3 || ' WHERE ' || DB3_COL2 || OP || "COND";
MYSTR2 := 'CREATE TABLE RESULTS_TEMP2 AS ' || STR2;
IF DB3_COL != 'null' THEN
EXECUTE IMMEDIATE STR2 BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR7;
EXECUTE IMMEDIATE MYSTR2;
DBMS_OUTPUT.PUT_LINE(STR2);
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
ELSE 
MYSTR2 := 'CREATE TABLE RESULTS_TEMP2 (COL1 VARCHAR2(200))';
DBMS_OUTPUT.PUT_LINE(STR2);
EXECUTE IMMEDIATE MYSTR2;
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
STR3 := 'SELECT ' || DB4_COL || ' FROM ' || DB4 || ' WHERE ' || DB4_COL2 || ' ' || OP || ' ' || "COND";
--STR8 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB4_COL || ',' || DB4_COLS1 || ' FROM ' || DB4 || ' WHERE ' || DB4_COL2 || OP || "COND";
MYSTR3 := 'CREATE TABLE RESULTS_TEMP3 AS ' || STR3;
IF DB4_COL != 'null' THEN
EXECUTE IMMEDIATE STR3 BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR8;
EXECUTE IMMEDIATE MYSTR3;
DBMS_OUTPUT.PUT_LINE(STR3);
ELSE 
MYSTR3:= 'CREATE TABLE RESULTS_TEMP3 (COL1 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR3;
DBMS_OUTPUT.PUT_LINE(STR3);
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
END;
/

SELECT * FROM RESULTS_TEMP 
UNION
SELECT * FROM RESULTS_TEMP1
UNION
SELECT * FROM RESULTS_TEMP2
UNION
SELECT * FROM RESULTS_TEMP3;



select * from results_temp;

select * from results_temp1;

select * from results_temp2;

select * from results_temp3;


--Case 2:  Search for all CDs that feature a specific artist

SET SERVEROUTPUT ON;
DROP TABLE MY_TEMP_TABLE;
DROP TABLE RESULTS_TEMP;
DROP TABLE RESULTS_TEMP1;
DROP TABLE RESULTS_TEMP2;
DROP TABLE RESULTS_TEMP3;

CREATE TABLE my_temp_table (
  TOKEN_ID INT,
  TOKEN     VARCHAR2(200),
  DESCRIPT  VARCHAR2(300)
);

DROP TABLE METADATA_LAYER_TEMP;

create table metadata_layer_temp(
cannonical_representation varchar2(100),
db1_column_name varchar2(100),
db1_column_data_type varchar2(100),
db1_function_name varchar2(100),
db2_column_name varchar2(100),
db2_column_data_type varchar2(100),
db2_function_name varchar2(100),
db3_column_name varchar2(100),
db3_column_data_type varchar2(100),
db3_function_name varchar2(100),
db4_column_name varchar2(100),
db4_column_data_type varchar2(100),
db4_function_name varchar2(100)
);
/
DECLARE
QUERYZ VARCHAR2 (400) :='SELECT cds_title FROM cds_db WHERE artists = ''lil_baby''';
TOKENS VARCHAR(300);
BEGIN
FOR TOKEN IN (SELECT REGEXP_SUBSTR(QUERYZ,'[^ |,]+',1,LEVEL) TEXTS FROM DUAL
CONNECT BY REGEXP_SUBSTR(QUERYZ,' ',1,LEVEL-1) IS NOT NULL)
LOOP
TOKENS := TOKEN.TEXTS;
INSERT INTO MY_TEMP_TABLE (TOKEN) VALUES(TOKENS);
DBMS_OUTPUT.PUT_LINE(TOKENS);
END LOOP;
END;
/

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'KEYWORD'
WHERE EXISTS (SELECT KEYWORD FROM KEYWORD_TABLE WHERE MY_TEMP_TABLE.TOKEN = KEYWORD_TABLE.KEYWORD);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'TOKEN'
WHERE NOT EXISTS (SELECT KEYWORD FROM KEYWORD_TABLE WHERE MY_TEMP_TABLE.TOKEN = KEYWORD_TABLE.KEYWORD);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'OPERATOR'
WHERE EXISTS (SELECT OPERATOR1 FROM OPERATORS WHERE MY_TEMP_TABLE.TOKEN = OPERATORS.OPERATOR1);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'CONDITION' WHERE DESCRIPT = 'TOKEN' AND
NOT EXISTS (SELECT CANNONICAL_REPRESENTATION FROM METADATA_LAYER WHERE MY_TEMP_TABLE.TOKEN = METADATA_LAYER.CANNONICAL_REPRESENTATION);

DECLARE
V_NAME varchar2(200);
SQL_SMT VARCHAR2(600);
CURSOR MY_CURSOR IS
SELECT TOKEN FROM MY_TEMP_TABLE WHERE DESCRIPT = 'TOKEN';
BEGIN
SQL_SMT := 'INSERT INTO METADATA_LAYER_TEMP SELECT * FROM METADATA_LAYER WHERE :DRIP IN (CANNONICAL_REPRESENTATION,DB1_COLUMN_NAME,DB1_COLUMN_DATA_TYPE,DB1_FUNCTION_NAME,DB2_COLUMN_NAME,DB2_COLUMN_DATA_TYPE,
DB2_FUNCTION_NAME,DB3_COLUMN_NAME,DB3_COLUMN_DATA_TYPE,DB3_FUNCTION_NAME,DB4_COLUMN_NAME,DB4_COLUMN_DATA_TYPE,DB4_FUNCTION_NAME)';
OPEN MY_CURSOR;
LOOP
FETCH MY_CURSOR INTO V_NAME;
EXECUTE IMMEDIATE SQL_SMT USING V_NAME;
EXIT WHEN MY_CURSOR%NOTFOUND;
END LOOP;
CLOSE MY_CURSOR;
END;
/

DELETE FROM
   METADATA_LAYER_TEMP A
WHERE
  a.rowid >
   ANY (
     SELECT
        B.rowid
     FROM
        METADATA_LAYER_TEMP B
     WHERE
        a.cannonical_representation = b.cannonical_representation
     AND
        a.cannonical_representation = b.cannonical_representation
        );

UPDATE MY_TEMP_TABLE SET TOKEN_ID = ROWNUM;

DROP TABLE METADATA_LAYER_TEMP1;

CREATE TABLE METADATA_LAYER_TEMP1 AS (SELECT MY_TEMP_TABLE.*,METADATA_LAYER_TEMP.* FROM MY_TEMP_TABLE LEFT JOIN METADATA_LAYER_TEMP ON MY_TEMP_TABLE.TOKEN = METADATA_LAYER_TEMP.CANNONICAL_REPRESENTATION);


DROP TABLE RESULTS_TABLE1;
CREATE TABLE RESULTS_TABLE1(RESULTS_X VARCHAR2(200),RESULTS_Y VARCHAR2(200));
--single column query--
DECLARE
TYPE OVERSEAS_DRIP IS TABLE OF VARCHAR2(200);
TYPE OVERSEAS_DRIP2 IS TABLE OF VARCHAR2(200);
FDRIP OVERSEAS_DRIP;
FDRIP2 OVERSEAS_DRIP2;
DB1_COL METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2_COL METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3_COL METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4_COL METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_COLS1 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB2_COLS1 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB3_COLS1 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB4_COLS1 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB1 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_COL2 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2_COL2 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3_COL2 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4_COL2 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
OP MY_TEMP_TABLE.TOKEN%TYPE DEFAULT 'DRIP';
COND MY_TEMP_TABLE.TOKEN%TYPE;
STR VARCHAR2(1000);
MYSTR VARCHAR2(1000);
STR1 VARCHAR2(1000);
MYSTR1 VARCHAR2(1000);
STR2 VARCHAR2(1000);
MYSTR2 VARCHAR2(1000);
STR3 VARCHAR2(1000);
MYSTR3 VARCHAR2(1000);
STR5 VARCHAR2(1000);
STR6 VARCHAR2(1000);
STR7 VARCHAR2(1000);
STR8 VARCHAR2(10000);
BEGIN
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COL,DB2_COL,DB3_COL,DB4_COL
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id = 2;
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1,DB2,DB3,DB4
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE = 'table';
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COL2,DB2_COL2,DB3_COL2,DB4_COL2
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id != 2;
SELECT TOKEN
INTO OP
FROM MY_TEMP_TABLE WHERE DESCRIPT = 'OPERATOR';
SELECT TOKEN
INTO COND
FROM MY_TEMP_TABLE WHERE DESCRIPT = 'CONDITION';
IF DB1_COL != 'null' THEN
STR := 'SELECT ' || DB1_COL || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || ' ' || OP || ' ' || "COND";
--STR5 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB1_COL || ',' || DB1_COLS1 || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || OP || "COND";
MYSTR := 'CREATE TABLE RESULTS_TEMP AS ' || STR;
EXECUTE IMMEDIATE STR BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR5;
EXECUTE IMMEDIATE MYSTR;
DBMS_OUTPUT.PUT_LINE(STR);
ELSE DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
MYSTR := 'CREATE TABLE RESULTS_TEMP (COL1 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR;
END IF;
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
STR1 := 'SELECT ' || DB2_COL || ' FROM ' || DB2 || ' WHERE ' || DB2_COL2 || ' ' || OP || ' ' || "COND";
--STR6 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB2_COL || ',' || DB2_COLS1 || ' FROM ' || DB2 || ' WHERE ' || DB2_COL2 || OP || "COND";
MYSTR1 := 'CREATE TABLE RESULTS_TEMP1 AS ' || STR1;
IF DB2_COL != 'null' THEN
EXECUTE IMMEDIATE STR1 BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR6;
EXECUTE IMMEDIATE MYSTR1;
DBMS_OUTPUT.PUT_LINE(STR1);
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
ELSE
MYSTR1 := 'CREATE TABLE RESULTS_TEMP1 (COL1 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR1;
DBMS_OUTPUT.PUT_LINE(STR1);
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
STR2 := 'SELECT ' || DB3_COL || ' FROM ' || DB3 || ' WHERE ' || DB3_COL2 || ' ' || OP || ' ' || "COND";
--STR7 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB3_COL || ',' || DB3_COLS1 || ' FROM ' || DB3 || ' WHERE ' || DB3_COL2 || OP || "COND";
MYSTR2 := 'CREATE TABLE RESULTS_TEMP2 AS ' || STR2;
IF DB3_COL != 'null' THEN
EXECUTE IMMEDIATE STR2 BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR7;
EXECUTE IMMEDIATE MYSTR2;
DBMS_OUTPUT.PUT_LINE(STR2);
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
ELSE 
MYSTR2 := 'CREATE TABLE RESULTS_TEMP2 (COL1 VARCHAR2(200))';
DBMS_OUTPUT.PUT_LINE(STR2);
EXECUTE IMMEDIATE MYSTR2;
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
STR3 := 'SELECT ' || DB4_COL || ' FROM ' || DB4 || ' WHERE ' || DB4_COL2 || ' ' || OP || ' ' || "COND";
--STR8 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB4_COL || ',' || DB4_COLS1 || ' FROM ' || DB4 || ' WHERE ' || DB4_COL2 || OP || "COND";
MYSTR3 := 'CREATE TABLE RESULTS_TEMP3 AS ' || STR3;
IF DB4_COL != 'null' THEN
EXECUTE IMMEDIATE STR3 BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR8;
EXECUTE IMMEDIATE MYSTR3;
DBMS_OUTPUT.PUT_LINE(STR3);
ELSE 
MYSTR3:= 'CREATE TABLE RESULTS_TEMP3 (COL1 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR3;
DBMS_OUTPUT.PUT_LINE(STR3);
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
END;
/

SELECT * FROM RESULTS_TEMP 
UNION
SELECT * FROM RESULTS_TEMP1
UNION
SELECT * FROM RESULTS_TEMP2
UNION
SELECT * FROM RESULTS_TEMP3;


















select * from results_temp;

select * from results_temp1;

select * from results_temp2;

select * from results_temp3;


--Case 3:Display a few columns from each order in the local databases
SET SERVEROUTPUT ON;
DROP TABLE MY_TEMP_TABLE;
DROP TABLE RESULTS_TEMP;
DROP TABLE RESULTS_TEMP1;
DROP TABLE RESULTS_TEMP2;
DROP TABLE RESULTS_TEMP3;

CREATE TABLE my_temp_table (
  TOKEN_ID INT,
  TOKEN     VARCHAR2(200),
  DESCRIPT  VARCHAR2(300)
);

DROP TABLE METADATA_LAYER_TEMP;

create table metadata_layer_temp(
cannonical_representation varchar2(100),
db1_column_name varchar2(100),
db1_column_data_type varchar2(100),
db1_function_name varchar2(100),
db2_column_name varchar2(100),
db2_column_data_type varchar2(100),
db2_function_name varchar2(100),
db3_column_name varchar2(100),
db3_column_data_type varchar2(100),
db3_function_name varchar2(100),
db4_column_name varchar2(100),
db4_column_data_type varchar2(100),
db4_function_name varchar2(100)
);
DECLARE
QUERYZ VARCHAR2 (400) :=  'SELECT purchase_id, purchase_date FROM purchases_db WHERE purchase_date > ''25-MAY-19''';
TOKENS VARCHAR(300);
BEGIN
FOR TOKEN IN (SELECT REGEXP_SUBSTR(QUERYZ,'[^ |,]+',1,LEVEL) TEXTS FROM DUAL
CONNECT BY REGEXP_SUBSTR(QUERYZ,' ',1,LEVEL-1) IS NOT NULL)
LOOP
TOKENS := TOKEN.TEXTS;
INSERT INTO MY_TEMP_TABLE (TOKEN) VALUES(TOKENS);
DBMS_OUTPUT.PUT_LINE(TOKENS);
END LOOP;
END;
/

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'KEYWORD'
WHERE EXISTS (SELECT KEYWORD FROM KEYWORD_TABLE WHERE MY_TEMP_TABLE.TOKEN = KEYWORD_TABLE.KEYWORD);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'TOKEN'
WHERE NOT EXISTS (SELECT KEYWORD FROM KEYWORD_TABLE WHERE MY_TEMP_TABLE.TOKEN = KEYWORD_TABLE.KEYWORD);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'OPERATOR'
WHERE EXISTS (SELECT OPERATOR1 FROM OPERATORS WHERE MY_TEMP_TABLE.TOKEN = OPERATORS.OPERATOR1);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'CONDITION' WHERE DESCRIPT = 'TOKEN' AND
NOT EXISTS (SELECT CANNONICAL_REPRESENTATION FROM METADATA_LAYER WHERE MY_TEMP_TABLE.TOKEN = METADATA_LAYER.CANNONICAL_REPRESENTATION);

DECLARE
V_NAME varchar2(200);
SQL_SMT VARCHAR2(600);
CURSOR MY_CURSOR IS
SELECT TOKEN FROM MY_TEMP_TABLE WHERE DESCRIPT = 'TOKEN';
BEGIN
SQL_SMT := 'INSERT INTO METADATA_LAYER_TEMP SELECT * FROM METADATA_LAYER WHERE :DRIP IN (CANNONICAL_REPRESENTATION,DB1_COLUMN_NAME,DB1_COLUMN_DATA_TYPE,DB1_FUNCTION_NAME,DB2_COLUMN_NAME,DB2_COLUMN_DATA_TYPE,
DB2_FUNCTION_NAME,DB3_COLUMN_NAME,DB3_COLUMN_DATA_TYPE,DB3_FUNCTION_NAME,DB4_COLUMN_NAME,DB4_COLUMN_DATA_TYPE,DB4_FUNCTION_NAME)';
OPEN MY_CURSOR;
LOOP
FETCH MY_CURSOR INTO V_NAME;
EXECUTE IMMEDIATE SQL_SMT USING V_NAME;
EXIT WHEN MY_CURSOR%NOTFOUND;
END LOOP;
CLOSE MY_CURSOR;
END;
/

DELETE FROM
   METADATA_LAYER_TEMP A
WHERE
  a.rowid >
   ANY (
     SELECT
        B.rowid
     FROM
        METADATA_LAYER_TEMP B
     WHERE
        a.cannonical_representation = b.cannonical_representation
     AND
        a.cannonical_representation = b.cannonical_representation
        );

UPDATE MY_TEMP_TABLE SET TOKEN_ID = ROWNUM;

DROP TABLE METADATA_LAYER_TEMP1;

CREATE TABLE METADATA_LAYER_TEMP1 AS (SELECT MY_TEMP_TABLE.*,METADATA_LAYER_TEMP.* FROM MY_TEMP_TABLE LEFT JOIN METADATA_LAYER_TEMP ON MY_TEMP_TABLE.TOKEN = METADATA_LAYER_TEMP.CANNONICAL_REPRESENTATION);


DROP TABLE RESULTS_TABLE1;
CREATE TABLE RESULTS_TABLE1(RESULTS_X VARCHAR2(200),RESULTS_Y VARCHAR2(200));
--single column query--
DECLARE
TYPE OVERSEAS_DRIP IS TABLE OF VARCHAR2(200);
TYPE OVERSEAS_DRIP2 IS TABLE OF VARCHAR2(200);
FDRIP OVERSEAS_DRIP;
FDRIP2 OVERSEAS_DRIP2;
DB1_COL METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2_COL METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3_COL METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4_COL METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_COLS1 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB2_COLS1 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB3_COLS1 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB4_COLS1 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB1 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_COL2 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2_COL2 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3_COL2 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4_COL2 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_FUNC METADATA_LAYER_TEMP1.DB4_FUNCTION_NAME%TYPE;
OP MY_TEMP_TABLE.TOKEN%TYPE DEFAULT 'DRIP';
COND MY_TEMP_TABLE.TOKEN%TYPE;
STR VARCHAR2(1000);
MYSTR VARCHAR2(1000);
STR1 VARCHAR2(1000);
MYSTR1 VARCHAR2(1000);
STR2 VARCHAR2(1000);
MYSTR2 VARCHAR2(1000);
STR3 VARCHAR2(1000);
MYSTR3 VARCHAR2(1000);
STR5 VARCHAR2(1000);
STR6 VARCHAR2(1000);
STR7 VARCHAR2(1000);
STR8 VARCHAR2(10000);
FINALSTR VARCHAR2(140);
FINALSTR2 VARCHAR2(140);
BEGIN
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COL,DB2_COL,DB3_COL,DB4_COL
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id = 2;
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COLS1,DB2_COLS1,DB3_COLS1,DB4_COLS1
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id = 3;
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1,DB2,DB3,DB4
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE = 'table';
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COL2,DB2_COL2,DB3_COL2,DB4_COL2
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id != 2 and token_id != 3;
SELECT TOKEN
INTO OP
FROM MY_TEMP_TABLE WHERE DESCRIPT = 'OPERATOR';
SELECT DB1_FUNCTION_NAME
INTO DB1_FUNC
FROM METADATA_LAYER_TEMP1 WHERE TOKEN_ID = 3;
SELECT TOKEN
INTO COND
FROM MY_TEMP_TABLE WHERE DESCRIPT = 'CONDITION';
IF DB1_COL != 'null'  AND DB1_FUNC = 'null' THEN
STR := 'SELECT ' || DB1_COL || ',' || DB1_COLS1 || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || OP || "COND";
--STR5 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB1_COL || ',' || DB1_COLS1 || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || OP || "COND";
MYSTR := 'CREATE TABLE RESULTS_TEMP AS ' || STR;
EXECUTE IMMEDIATE STR BULK COLLECT INTO FDRIP, FDRIP2;
--EXECUTE IMMEDIATE STR5;
EXECUTE IMMEDIATE MYSTR;
DBMS_OUTPUT.PUT_LINE(STR);
ELSIF DB1_COL != 'null' AND DB1_FUNC != 'null' THEN
FINALSTR := 'SELECT ' || DB1_COL || ',' || DB1_FUNC || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || OP || "COND";
FINALSTR2 := 'CREATE TABLE RESULTS_TEMP AS ' || FINALSTR;
EXECUTE IMMEDIATE FINALSTR2;
EXECUTE IMMEDIATE FINALSTR BULK COLLECT  INTO FDRIP, FDRIP2;
DBMS_OUTPUT.PUT_LINE(FINALSTR);
ELSE DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
MYSTR := 'CREATE TABLE RESULTS_TEMP (COL1 VARCHAR2(200), COL2 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR;
END IF;
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX) ||' , '|| FDRIP2(IDX));
END LOOP;
STR1 := 'SELECT ' || DB2_COL || ',' || DB2_COLS1 || ' FROM ' || DB2 || ' WHERE ' || DB2_COL2 || OP || "COND";
--STR6 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB2_COL || ',' || DB2_COLS1 || ' FROM ' || DB2 || ' WHERE ' || DB2_COL2 || OP || "COND";
MYSTR1 := 'CREATE TABLE RESULTS_TEMP1 AS ' || STR1;
IF DB2_COL != 'null' THEN
EXECUTE IMMEDIATE STR1 BULK COLLECT INTO FDRIP,FDRIP2;
--EXECUTE IMMEDIATE STR6;
EXECUTE IMMEDIATE MYSTR1;
DBMS_OUTPUT.PUT_LINE(STR1);
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX) ||' , '|| FDRIP2(IDX));
END LOOP;
ELSE
MYSTR1 := 'CREATE TABLE RESULTS_TEMP1 (COL1 VARCHAR2(200), COL2 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR1;
DBMS_OUTPUT.PUT_LINE(STR1);
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
STR2 := 'SELECT ' || DB3_COL || ',' || DB3_COLS1 || ' FROM ' || DB3 || ' WHERE ' || DB3_COL2 || OP || "COND";
--STR7 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB3_COL || ',' || DB3_COLS1 || ' FROM ' || DB3 || ' WHERE ' || DB3_COL2 || OP || "COND";
MYSTR2 := 'CREATE TABLE RESULTS_TEMP2 AS ' || STR2;
IF DB3_COL != 'null' THEN
EXECUTE IMMEDIATE STR2 BULK COLLECT INTO FDRIP,FDRIP2;
--EXECUTE IMMEDIATE STR7;
EXECUTE IMMEDIATE MYSTR2;
DBMS_OUTPUT.PUT_LINE(STR2);
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX) ||' , '|| FDRIP2(IDX));
END LOOP;
ELSE 
MYSTR2 := 'CREATE TABLE RESULTS_TEMP2 (COL1 VARCHAR2(200), COL2 VARCHAR2(200))';
DBMS_OUTPUT.PUT_LINE(STR2);
EXECUTE IMMEDIATE MYSTR2;
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
STR3 := 'SELECT ' || DB4_COL || ',' || DB4_COLS1 || ' FROM ' || DB4 || ' WHERE ' || DB4_COL2 || OP || "COND";
--STR8 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB4_COL || ',' || DB4_COLS1 || ' FROM ' || DB4 || ' WHERE ' || DB4_COL2 || OP || "COND";
MYSTR3 := 'CREATE TABLE RESULTS_TEMP3 AS ' || STR3;
IF DB4_COL != 'null' THEN
EXECUTE IMMEDIATE STR3 BULK COLLECT INTO FDRIP,FDRIP2;
--EXECUTE IMMEDIATE STR8;
EXECUTE IMMEDIATE MYSTR3;
DBMS_OUTPUT.PUT_LINE(STR3);
ELSE 
MYSTR3:= 'CREATE TABLE RESULTS_TEMP3 (COL1 VARCHAR2(200), COL2 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR3;
DBMS_OUTPUT.PUT_LINE(STR3);
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX) ||' , '|| FDRIP2(IDX));
END LOOP;
END;
/

SELECT * FROM RESULTS_TEMP 
UNION
SELECT * FROM RESULTS_TEMP1
UNION
SELECT * FROM RESULTS_TEMP2
UNION
SELECT * FROM RESULTS_TEMP3;



















SELECT * FROM RESULTS_TEMP ;

SELECT * FROM RESULTS_TEMP1;


SELECT * FROM RESULTS_TEMP2;

SELECT * FROM RESULTS_TEMP3;

---Case 4:Search for each product with at least quantity N (you choose what N is)

SET SERVEROUTPUT ON;
DROP TABLE MY_TEMP_TABLE;
DROP TABLE RESULTS_TEMP;
DROP TABLE RESULTS_TEMP1;
DROP TABLE RESULTS_TEMP2;
DROP TABLE RESULTS_TEMP3;

CREATE TABLE my_temp_table (
  TOKEN_ID INT,
  TOKEN     VARCHAR2(200),
  DESCRIPT  VARCHAR2(300)
);

DROP TABLE METADATA_LAYER_TEMP;

create table metadata_layer_temp(
cannonical_representation varchar2(100),
db1_column_name varchar2(100),
db1_column_data_type varchar2(100),
db1_function_name varchar2(100),
db2_column_name varchar2(100),
db2_column_data_type varchar2(100),
db2_function_name varchar2(100),
db3_column_name varchar2(100),
db3_column_data_type varchar2(100),
db3_function_name varchar2(100),
db4_column_name varchar2(100),
db4_column_data_type varchar2(100),
db4_function_name varchar2(100)
);
DECLARE
QUERYZ VARCHAR2 (400) := 'SELECT product_name FROM product_db WHERE product_quantity > 2';
TOKENS VARCHAR(300);
BEGIN
FOR TOKEN IN (SELECT REGEXP_SUBSTR(QUERYZ,'[^ |,]+',1,LEVEL) TEXTS FROM DUAL
CONNECT BY REGEXP_SUBSTR(QUERYZ,' ',1,LEVEL-1) IS NOT NULL)
LOOP
TOKENS := TOKEN.TEXTS;
INSERT INTO MY_TEMP_TABLE (TOKEN) VALUES(TOKENS);
DBMS_OUTPUT.PUT_LINE(TOKENS);
END LOOP;
END;
/

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'KEYWORD'
WHERE EXISTS (SELECT KEYWORD FROM KEYWORD_TABLE WHERE MY_TEMP_TABLE.TOKEN = KEYWORD_TABLE.KEYWORD);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'TOKEN'
WHERE NOT EXISTS (SELECT KEYWORD FROM KEYWORD_TABLE WHERE MY_TEMP_TABLE.TOKEN = KEYWORD_TABLE.KEYWORD);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'OPERATOR'
WHERE EXISTS (SELECT OPERATOR1 FROM OPERATORS WHERE MY_TEMP_TABLE.TOKEN = OPERATORS.OPERATOR1);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'CONDITION' WHERE DESCRIPT = 'TOKEN' AND
NOT EXISTS (SELECT CANNONICAL_REPRESENTATION FROM METADATA_LAYER WHERE MY_TEMP_TABLE.TOKEN = METADATA_LAYER.CANNONICAL_REPRESENTATION);

DECLARE
V_NAME varchar2(200);
SQL_SMT VARCHAR2(600);
CURSOR MY_CURSOR IS
SELECT TOKEN FROM MY_TEMP_TABLE WHERE DESCRIPT = 'TOKEN';
BEGIN
SQL_SMT := 'INSERT INTO METADATA_LAYER_TEMP SELECT * FROM METADATA_LAYER WHERE :DRIP IN (CANNONICAL_REPRESENTATION,DB1_COLUMN_NAME,DB1_COLUMN_DATA_TYPE,DB1_FUNCTION_NAME,DB2_COLUMN_NAME,DB2_COLUMN_DATA_TYPE,
DB2_FUNCTION_NAME,DB3_COLUMN_NAME,DB3_COLUMN_DATA_TYPE,DB3_FUNCTION_NAME,DB4_COLUMN_NAME,DB4_COLUMN_DATA_TYPE,DB4_FUNCTION_NAME)';
OPEN MY_CURSOR;
LOOP
FETCH MY_CURSOR INTO V_NAME;
EXECUTE IMMEDIATE SQL_SMT USING V_NAME;
EXIT WHEN MY_CURSOR%NOTFOUND;
END LOOP;
CLOSE MY_CURSOR;
END;
/

DELETE FROM
   METADATA_LAYER_TEMP A
WHERE
  a.rowid >
   ANY (
     SELECT
        B.rowid
     FROM
        METADATA_LAYER_TEMP B
     WHERE
        a.cannonical_representation = b.cannonical_representation
     AND
        a.cannonical_representation = b.cannonical_representation
        );

UPDATE MY_TEMP_TABLE SET TOKEN_ID = ROWNUM;

DROP TABLE METADATA_LAYER_TEMP1;

CREATE TABLE METADATA_LAYER_TEMP1 AS (SELECT MY_TEMP_TABLE.*,METADATA_LAYER_TEMP.* FROM MY_TEMP_TABLE LEFT JOIN METADATA_LAYER_TEMP ON MY_TEMP_TABLE.TOKEN = METADATA_LAYER_TEMP.CANNONICAL_REPRESENTATION);


DROP TABLE RESULTS_TABLE1;
CREATE TABLE RESULTS_TABLE1(RESULTS_X VARCHAR2(200),RESULTS_Y VARCHAR2(200));
--single column query--
DECLARE
TYPE OVERSEAS_DRIP IS TABLE OF VARCHAR2(200);
TYPE OVERSEAS_DRIP2 IS TABLE OF VARCHAR2(200);
FDRIP OVERSEAS_DRIP;
FDRIP2 OVERSEAS_DRIP2;
DB1_COL METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2_COL METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3_COL METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4_COL METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_COLS1 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB2_COLS1 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB3_COLS1 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB4_COLS1 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB1 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_COL2 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2_COL2 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3_COL2 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4_COL2 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
OP MY_TEMP_TABLE.TOKEN%TYPE DEFAULT 'DRIP';
COND MY_TEMP_TABLE.TOKEN%TYPE;
STR VARCHAR2(1000);
MYSTR VARCHAR2(1000);
STR1 VARCHAR2(1000);
MYSTR1 VARCHAR2(1000);
STR2 VARCHAR2(1000);
MYSTR2 VARCHAR2(1000);
STR3 VARCHAR2(1000);
MYSTR3 VARCHAR2(1000);
STR5 VARCHAR2(1000);
STR6 VARCHAR2(1000);
STR7 VARCHAR2(1000);
STR8 VARCHAR2(10000);
BEGIN
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COL,DB2_COL,DB3_COL,DB4_COL
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id = 2;
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1,DB2,DB3,DB4
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE = 'table';
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COL2,DB2_COL2,DB3_COL2,DB4_COL2
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id != 2;
SELECT TOKEN
INTO OP
FROM MY_TEMP_TABLE WHERE DESCRIPT = 'OPERATOR';
SELECT TOKEN
INTO COND
FROM MY_TEMP_TABLE WHERE DESCRIPT = 'CONDITION';
IF DB1_COL != 'null' THEN
STR := 'SELECT ' || DB1_COL || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || ' ' || OP || ' ' || "COND";
--STR5 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB1_COL || ',' || DB1_COLS1 || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || OP || "COND";
MYSTR := 'CREATE TABLE RESULTS_TEMP AS ' || STR;
EXECUTE IMMEDIATE STR BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR5;
EXECUTE IMMEDIATE MYSTR;
DBMS_OUTPUT.PUT_LINE(STR);
ELSE DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
MYSTR := 'CREATE TABLE RESULTS_TEMP (COL1 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR;
END IF;
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
STR1 := 'SELECT ' || DB2_COL || ' FROM ' || DB2 || ' WHERE ' || DB2_COL2 || ' ' || OP || ' ' || "COND";
--STR6 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB2_COL || ',' || DB2_COLS1 || ' FROM ' || DB2 || ' WHERE ' || DB2_COL2 || OP || "COND";
MYSTR1 := 'CREATE TABLE RESULTS_TEMP1 AS ' || STR1;
IF DB2_COL != 'null' THEN
EXECUTE IMMEDIATE STR1 BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR6;
EXECUTE IMMEDIATE MYSTR1;
DBMS_OUTPUT.PUT_LINE(STR1);
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
ELSE
MYSTR1 := 'CREATE TABLE RESULTS_TEMP1 (COL1 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR1;
DBMS_OUTPUT.PUT_LINE(STR1);
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
STR2 := 'SELECT ' || DB3_COL || ' FROM ' || DB3 || ' WHERE ' || DB3_COL2 || ' ' || OP || ' ' || "COND";
--STR7 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB3_COL || ',' || DB3_COLS1 || ' FROM ' || DB3 || ' WHERE ' || DB3_COL2 || OP || "COND";
MYSTR2 := 'CREATE TABLE RESULTS_TEMP2 AS ' || STR2;
IF DB3_COL != 'null' THEN
EXECUTE IMMEDIATE STR2 BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR7;
EXECUTE IMMEDIATE MYSTR2;
DBMS_OUTPUT.PUT_LINE(STR2);
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
ELSE 
MYSTR2 := 'CREATE TABLE RESULTS_TEMP2 (COL1 VARCHAR2(200))';
DBMS_OUTPUT.PUT_LINE(STR2);
EXECUTE IMMEDIATE MYSTR2;
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
STR3 := 'SELECT ' || DB4_COL || ' FROM ' || DB4 || ' WHERE ' || DB4_COL2 || ' ' || OP || ' ' || "COND";
--STR8 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB4_COL || ',' || DB4_COLS1 || ' FROM ' || DB4 || ' WHERE ' || DB4_COL2 || OP || "COND";
MYSTR3 := 'CREATE TABLE RESULTS_TEMP3 AS ' || STR3;
IF DB4_COL != 'null' THEN
EXECUTE IMMEDIATE STR3 BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR8;
EXECUTE IMMEDIATE MYSTR3;
DBMS_OUTPUT.PUT_LINE(STR3);
ELSE 
MYSTR3:= 'CREATE TABLE RESULTS_TEMP3 (COL1 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR3;
DBMS_OUTPUT.PUT_LINE(STR3);
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
END;
/

SELECT * FROM RESULTS_TEMP 
UNION
SELECT * FROM RESULTS_TEMP1
UNION
SELECT * FROM RESULTS_TEMP2
UNION
SELECT * FROM RESULTS_TEMP3;























SELECT * FROM RESULTS_TEMP ;

SELECT * FROM RESULTS_TEMP1;


SELECT * FROM RESULTS_TEMP2;


SELECT * FROM RESULTS_TEMP3;


---Case 5:Display all orders of a particular customer


SET SERVEROUTPUT ON;
DROP TABLE MY_TEMP_TABLE;
DROP TABLE RESULTS_TEMP;
DROP TABLE RESULTS_TEMP1;
DROP TABLE RESULTS_TEMP2;
DROP TABLE RESULTS_TEMP3;

CREATE TABLE my_temp_table (
  TOKEN_ID INT,
  TOKEN     VARCHAR2(200),
  DESCRIPT  VARCHAR2(300)
);

DROP TABLE METADATA_LAYER_TEMP;

create table metadata_layer_temp(
cannonical_representation varchar2(100),
db1_column_name varchar2(100),
db1_column_data_type varchar2(100),
db1_function_name varchar2(100),
db2_column_name varchar2(100),
db2_column_data_type varchar2(100),
db2_function_name varchar2(100),
db3_column_name varchar2(100),
db3_column_data_type varchar2(100),
db3_function_name varchar2(100),
db4_column_name varchar2(100),
db4_column_data_type varchar2(100),
db4_function_name varchar2(100)
);
DECLARE
QUERYZ VARCHAR2 (400) :=  'SELECT purchase_id FROM purchases_db WHERE purchase_customer_id = ''47931''';
TOKENS VARCHAR(300);
BEGIN
FOR TOKEN IN (SELECT REGEXP_SUBSTR(QUERYZ,'[^ |,]+',1,LEVEL) TEXTS FROM DUAL
CONNECT BY REGEXP_SUBSTR(QUERYZ,' ',1,LEVEL-1) IS NOT NULL)
LOOP
TOKENS := TOKEN.TEXTS;
INSERT INTO MY_TEMP_TABLE (TOKEN) VALUES(TOKENS);
DBMS_OUTPUT.PUT_LINE(TOKENS);
END LOOP;
END;
/

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'KEYWORD'
WHERE EXISTS (SELECT KEYWORD FROM KEYWORD_TABLE WHERE MY_TEMP_TABLE.TOKEN = KEYWORD_TABLE.KEYWORD);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'TOKEN'
WHERE NOT EXISTS (SELECT KEYWORD FROM KEYWORD_TABLE WHERE MY_TEMP_TABLE.TOKEN = KEYWORD_TABLE.KEYWORD);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'OPERATOR'
WHERE EXISTS (SELECT OPERATOR1 FROM OPERATORS WHERE MY_TEMP_TABLE.TOKEN = OPERATORS.OPERATOR1);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'CONDITION' WHERE DESCRIPT = 'TOKEN' AND
NOT EXISTS (SELECT CANNONICAL_REPRESENTATION FROM METADATA_LAYER WHERE MY_TEMP_TABLE.TOKEN = METADATA_LAYER.CANNONICAL_REPRESENTATION);

DECLARE
V_NAME varchar2(200);
SQL_SMT VARCHAR2(600);
CURSOR MY_CURSOR IS
SELECT TOKEN FROM MY_TEMP_TABLE WHERE DESCRIPT = 'TOKEN';
BEGIN
SQL_SMT := 'INSERT INTO METADATA_LAYER_TEMP SELECT * FROM METADATA_LAYER WHERE :DRIP IN (CANNONICAL_REPRESENTATION,DB1_COLUMN_NAME,DB1_COLUMN_DATA_TYPE,DB1_FUNCTION_NAME,DB2_COLUMN_NAME,DB2_COLUMN_DATA_TYPE,
DB2_FUNCTION_NAME,DB3_COLUMN_NAME,DB3_COLUMN_DATA_TYPE,DB3_FUNCTION_NAME,DB4_COLUMN_NAME,DB4_COLUMN_DATA_TYPE,DB4_FUNCTION_NAME)';
OPEN MY_CURSOR;
LOOP
FETCH MY_CURSOR INTO V_NAME;
EXECUTE IMMEDIATE SQL_SMT USING V_NAME;
EXIT WHEN MY_CURSOR%NOTFOUND;
END LOOP;
CLOSE MY_CURSOR;
END;
/

DELETE FROM
   METADATA_LAYER_TEMP A
WHERE
  a.rowid >
   ANY (
     SELECT
        B.rowid
     FROM
        METADATA_LAYER_TEMP B
     WHERE
        a.cannonical_representation = b.cannonical_representation
     AND
        a.cannonical_representation = b.cannonical_representation
        );

UPDATE MY_TEMP_TABLE SET TOKEN_ID = ROWNUM;

DROP TABLE METADATA_LAYER_TEMP1;

CREATE TABLE METADATA_LAYER_TEMP1 AS (SELECT MY_TEMP_TABLE.*,METADATA_LAYER_TEMP.* FROM MY_TEMP_TABLE LEFT JOIN METADATA_LAYER_TEMP ON MY_TEMP_TABLE.TOKEN = METADATA_LAYER_TEMP.CANNONICAL_REPRESENTATION);


DROP TABLE RESULTS_TABLE1;
CREATE TABLE RESULTS_TABLE1(RESULTS_X VARCHAR2(200),RESULTS_Y VARCHAR2(200));
--single column query--
DECLARE
TYPE OVERSEAS_DRIP IS TABLE OF VARCHAR2(200);
TYPE OVERSEAS_DRIP2 IS TABLE OF VARCHAR2(200);
FDRIP OVERSEAS_DRIP;
FDRIP2 OVERSEAS_DRIP2;
DB1_COL METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2_COL METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3_COL METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4_COL METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_COLS1 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB2_COLS1 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB3_COLS1 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB4_COLS1 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB1 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_COL2 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2_COL2 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3_COL2 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4_COL2 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
OP MY_TEMP_TABLE.TOKEN%TYPE DEFAULT 'DRIP';
COND MY_TEMP_TABLE.TOKEN%TYPE;
STR VARCHAR2(1000);
MYSTR VARCHAR2(1000);
STR1 VARCHAR2(1000);
MYSTR1 VARCHAR2(1000);
STR2 VARCHAR2(1000);
MYSTR2 VARCHAR2(1000);
STR3 VARCHAR2(1000);
MYSTR3 VARCHAR2(1000);
STR5 VARCHAR2(1000);
STR6 VARCHAR2(1000);
STR7 VARCHAR2(1000);
STR8 VARCHAR2(10000);
BEGIN
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COL,DB2_COL,DB3_COL,DB4_COL
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id = 2;
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1,DB2,DB3,DB4
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE = 'table';
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COL2,DB2_COL2,DB3_COL2,DB4_COL2
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id != 2;
SELECT TOKEN
INTO OP
FROM MY_TEMP_TABLE WHERE DESCRIPT = 'OPERATOR';
SELECT TOKEN
INTO COND
FROM MY_TEMP_TABLE WHERE DESCRIPT = 'CONDITION';
IF DB1_COL != 'null' THEN
STR := 'SELECT ' || DB1_COL || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || ' ' || OP || ' ' || "COND";
--STR5 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB1_COL || ',' || DB1_COLS1 || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || OP || "COND";
MYSTR := 'CREATE TABLE RESULTS_TEMP AS ' || STR;
EXECUTE IMMEDIATE STR BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR5;
EXECUTE IMMEDIATE MYSTR;
DBMS_OUTPUT.PUT_LINE(STR);
ELSE DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
MYSTR := 'CREATE TABLE RESULTS_TEMP (COL1 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR;
END IF;
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
STR1 := 'SELECT ' || DB2_COL || ' FROM ' || DB2 || ' WHERE ' || DB2_COL2 || ' ' || OP || ' ' || "COND";
--STR6 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB2_COL || ',' || DB2_COLS1 || ' FROM ' || DB2 || ' WHERE ' || DB2_COL2 || OP || "COND";
MYSTR1 := 'CREATE TABLE RESULTS_TEMP1 AS ' || STR1;
IF DB2_COL != 'null' THEN
EXECUTE IMMEDIATE STR1 BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR6;
EXECUTE IMMEDIATE MYSTR1;
DBMS_OUTPUT.PUT_LINE(STR1);
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
ELSE
MYSTR1 := 'CREATE TABLE RESULTS_TEMP1 (COL1 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR1;
DBMS_OUTPUT.PUT_LINE(STR1);
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
STR2 := 'SELECT ' || DB3_COL || ' FROM ' || DB3 || ' WHERE ' || DB3_COL2 || ' ' || OP || ' ' || "COND";
--STR7 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB3_COL || ',' || DB3_COLS1 || ' FROM ' || DB3 || ' WHERE ' || DB3_COL2 || OP || "COND";
MYSTR2 := 'CREATE TABLE RESULTS_TEMP2 AS ' || STR2;
IF DB3_COL != 'null' THEN
EXECUTE IMMEDIATE STR2 BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR7;
EXECUTE IMMEDIATE MYSTR2;
DBMS_OUTPUT.PUT_LINE(STR2);
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
ELSE 
MYSTR2 := 'CREATE TABLE RESULTS_TEMP2 (COL1 VARCHAR2(200))';
DBMS_OUTPUT.PUT_LINE(STR2);
EXECUTE IMMEDIATE MYSTR2;
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
STR3 := 'SELECT ' || DB4_COL || ' FROM ' || DB4 || ' WHERE ' || DB4_COL2 || ' ' || OP || ' ' || "COND";
--STR8 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB4_COL || ',' || DB4_COLS1 || ' FROM ' || DB4 || ' WHERE ' || DB4_COL2 || OP || "COND";
MYSTR3 := 'CREATE TABLE RESULTS_TEMP3 AS ' || STR3;
IF DB4_COL != 'null' THEN
EXECUTE IMMEDIATE STR3 BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR8;
EXECUTE IMMEDIATE MYSTR3;
DBMS_OUTPUT.PUT_LINE(STR3);
ELSE 
MYSTR3:= 'CREATE TABLE RESULTS_TEMP3 (COL1 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR3;
DBMS_OUTPUT.PUT_LINE(STR3);
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
END;
/

SELECT * FROM RESULTS_TEMP 
UNION
SELECT * FROM RESULTS_TEMP1
UNION
SELECT * FROM RESULTS_TEMP2
UNION
SELECT * FROM RESULTS_TEMP3;























SELECT * FROM RESULTS_TEMP ;

SELECT * FROM RESULTS_TEMP1;


SELECT * FROM RESULTS_TEMP2;


SELECT * FROM RESULTS_TEMP3;


----Case 6:Display all orders of a particular customer

SET SERVEROUTPUT ON;
DROP TABLE MY_TEMP_TABLE;
DROP TABLE RESULTS_TEMP;
DROP TABLE RESULTS_TEMP1;
DROP TABLE RESULTS_TEMP2;
DROP TABLE RESULTS_TEMP3;

CREATE TABLE my_temp_table (
  TOKEN_ID INT,
  TOKEN     VARCHAR2(200),
  DESCRIPT  VARCHAR2(300)
);

DROP TABLE METADATA_LAYER_TEMP;

create table metadata_layer_temp(
cannonical_representation varchar2(100),
db1_column_name varchar2(100),
db1_column_data_type varchar2(100),
db1_function_name varchar2(100),
db2_column_name varchar2(100),
db2_column_data_type varchar2(100),
db2_function_name varchar2(100),
db3_column_name varchar2(100),
db3_column_data_type varchar2(100),
db3_function_name varchar2(100),
db4_column_name varchar2(100),
db4_column_data_type varchar2(100),
db4_function_name varchar2(100)
);
DECLARE
QUERYZ VARCHAR2 (400) := 'SELECT customer_first_name, street_address FROM customers_db WHERE city = ''Columbia''';
TOKENS VARCHAR(300);
BEGIN
FOR TOKEN IN (SELECT REGEXP_SUBSTR(QUERYZ,'[^ |,]+',1,LEVEL) TEXTS FROM DUAL
CONNECT BY REGEXP_SUBSTR(QUERYZ,' ',1,LEVEL-1) IS NOT NULL)
LOOP
TOKENS := TOKEN.TEXTS;
INSERT INTO MY_TEMP_TABLE (TOKEN) VALUES(TOKENS);
DBMS_OUTPUT.PUT_LINE(TOKENS);
END LOOP;
END;
/

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'KEYWORD'
WHERE EXISTS (SELECT KEYWORD FROM KEYWORD_TABLE WHERE MY_TEMP_TABLE.TOKEN = KEYWORD_TABLE.KEYWORD);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'TOKEN'
WHERE NOT EXISTS (SELECT KEYWORD FROM KEYWORD_TABLE WHERE MY_TEMP_TABLE.TOKEN = KEYWORD_TABLE.KEYWORD);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'OPERATOR'
WHERE EXISTS (SELECT OPERATOR1 FROM OPERATORS WHERE MY_TEMP_TABLE.TOKEN = OPERATORS.OPERATOR1);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'CONDITION' WHERE DESCRIPT = 'TOKEN' AND
NOT EXISTS (SELECT CANNONICAL_REPRESENTATION FROM METADATA_LAYER WHERE MY_TEMP_TABLE.TOKEN = METADATA_LAYER.CANNONICAL_REPRESENTATION);

DECLARE
V_NAME varchar2(200);
SQL_SMT VARCHAR2(600);
CURSOR MY_CURSOR IS
SELECT TOKEN FROM MY_TEMP_TABLE WHERE DESCRIPT = 'TOKEN';
BEGIN
SQL_SMT := 'INSERT INTO METADATA_LAYER_TEMP SELECT * FROM METADATA_LAYER WHERE :DRIP IN (CANNONICAL_REPRESENTATION,DB1_COLUMN_NAME,DB1_COLUMN_DATA_TYPE,DB1_FUNCTION_NAME,DB2_COLUMN_NAME,DB2_COLUMN_DATA_TYPE,
DB2_FUNCTION_NAME,DB3_COLUMN_NAME,DB3_COLUMN_DATA_TYPE,DB3_FUNCTION_NAME,DB4_COLUMN_NAME,DB4_COLUMN_DATA_TYPE,DB4_FUNCTION_NAME)';
OPEN MY_CURSOR;
LOOP
FETCH MY_CURSOR INTO V_NAME;
EXECUTE IMMEDIATE SQL_SMT USING V_NAME;
EXIT WHEN MY_CURSOR%NOTFOUND;
END LOOP;
CLOSE MY_CURSOR;
END;
/

DELETE FROM
   METADATA_LAYER_TEMP A
WHERE
  a.rowid >
   ANY (
     SELECT
        B.rowid
     FROM
        METADATA_LAYER_TEMP B
     WHERE
        a.cannonical_representation = b.cannonical_representation
     AND
        a.cannonical_representation = b.cannonical_representation
        );

UPDATE MY_TEMP_TABLE SET TOKEN_ID = ROWNUM;

DROP TABLE METADATA_LAYER_TEMP1;

CREATE TABLE METADATA_LAYER_TEMP1 AS (SELECT MY_TEMP_TABLE.*,METADATA_LAYER_TEMP.* FROM MY_TEMP_TABLE LEFT JOIN METADATA_LAYER_TEMP ON MY_TEMP_TABLE.TOKEN = METADATA_LAYER_TEMP.CANNONICAL_REPRESENTATION);


DROP TABLE RESULTS_TABLE1;
CREATE TABLE RESULTS_TABLE1(RESULTS_X VARCHAR2(200),RESULTS_Y VARCHAR2(200));
--single column query--
DECLARE
TYPE OVERSEAS_DRIP IS TABLE OF VARCHAR2(200);
TYPE OVERSEAS_DRIP2 IS TABLE OF VARCHAR2(200);
FDRIP OVERSEAS_DRIP;
FDRIP2 OVERSEAS_DRIP2;
DB1_COL METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2_COL METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3_COL METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4_COL METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_COLS1 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB2_COLS1 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB3_COLS1 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB4_COLS1 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB1 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_COL2 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2_COL2 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3_COL2 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4_COL2 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_FUNC METADATA_LAYER_TEMP1.DB4_FUNCTION_NAME%TYPE;
OP MY_TEMP_TABLE.TOKEN%TYPE DEFAULT 'DRIP';
COND MY_TEMP_TABLE.TOKEN%TYPE;
STR VARCHAR2(1000);
MYSTR VARCHAR2(1000);
STR1 VARCHAR2(1000);
MYSTR1 VARCHAR2(1000);
STR2 VARCHAR2(1000);
MYSTR2 VARCHAR2(1000);
STR3 VARCHAR2(1000);
MYSTR3 VARCHAR2(1000);
STR5 VARCHAR2(1000);
STR6 VARCHAR2(1000);
STR7 VARCHAR2(1000);
STR8 VARCHAR2(10000);
FINALSTR VARCHAR2(140);
FINALSTR2 VARCHAR2(140);
BEGIN
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COL,DB2_COL,DB3_COL,DB4_COL
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id = 2;
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COLS1,DB2_COLS1,DB3_COLS1,DB4_COLS1
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id = 3;
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1,DB2,DB3,DB4
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE = 'table';
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COL2,DB2_COL2,DB3_COL2,DB4_COL2
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id != 2 and token_id != 3;
SELECT TOKEN
INTO OP
FROM MY_TEMP_TABLE WHERE DESCRIPT = 'OPERATOR';
SELECT DB1_FUNCTION_NAME
INTO DB1_FUNC
FROM METADATA_LAYER_TEMP1 WHERE TOKEN_ID = 3;
SELECT TOKEN
INTO COND
FROM MY_TEMP_TABLE WHERE DESCRIPT = 'CONDITION';
IF DB1_COL != 'null'  AND DB1_FUNC = 'null' THEN
STR := 'SELECT ' || DB1_COL || ',' || DB1_COLS1 || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || OP || "COND";
--STR5 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB1_COL || ',' || DB1_COLS1 || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || OP || "COND";
MYSTR := 'CREATE TABLE RESULTS_TEMP AS ' || STR;
EXECUTE IMMEDIATE STR BULK COLLECT INTO FDRIP, FDRIP2;
--EXECUTE IMMEDIATE STR5;
EXECUTE IMMEDIATE MYSTR;
DBMS_OUTPUT.PUT_LINE(STR);
ELSIF DB1_COL != 'null' AND DB1_FUNC != 'null' THEN
FINALSTR := 'SELECT ' || DB1_COL || ',' || DB1_FUNC || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || OP || "COND";
FINALSTR2 := 'CREATE TABLE RESULTS_TEMP AS ' || FINALSTR;
EXECUTE IMMEDIATE FINALSTR2;
EXECUTE IMMEDIATE FINALSTR BULK COLLECT  INTO FDRIP, FDRIP2;
DBMS_OUTPUT.PUT_LINE(FINALSTR);
ELSE DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
MYSTR := 'CREATE TABLE RESULTS_TEMP (COL1 VARCHAR2(200), COL2 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR;
END IF;
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX) ||' , '|| FDRIP2(IDX));
END LOOP;
STR1 := 'SELECT ' || DB2_COL || ',' || DB2_COLS1 || ' FROM ' || DB2 || ' WHERE ' || DB2_COL2 || OP || "COND";
--STR6 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB2_COL || ',' || DB2_COLS1 || ' FROM ' || DB2 || ' WHERE ' || DB2_COL2 || OP || "COND";
MYSTR1 := 'CREATE TABLE RESULTS_TEMP1 AS ' || STR1;
IF DB2_COL != 'null' THEN
EXECUTE IMMEDIATE STR1 BULK COLLECT INTO FDRIP,FDRIP2;
--EXECUTE IMMEDIATE STR6;
EXECUTE IMMEDIATE MYSTR1;
DBMS_OUTPUT.PUT_LINE(STR1);
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX) ||' , '|| FDRIP2(IDX));
END LOOP;
ELSE
MYSTR1 := 'CREATE TABLE RESULTS_TEMP1 (COL1 VARCHAR2(200), COL2 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR1;
DBMS_OUTPUT.PUT_LINE(STR1);
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
STR2 := 'SELECT ' || DB3_COL || ',' || DB3_COLS1 || ' FROM ' || DB3 || ' WHERE ' || DB3_COL2 || OP || "COND";
--STR7 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB3_COL || ',' || DB3_COLS1 || ' FROM ' || DB3 || ' WHERE ' || DB3_COL2 || OP || "COND";
MYSTR2 := 'CREATE TABLE RESULTS_TEMP2 AS ' || STR2;
IF DB3_COL != 'null' THEN
EXECUTE IMMEDIATE STR2 BULK COLLECT INTO FDRIP,FDRIP2;
--EXECUTE IMMEDIATE STR7;
EXECUTE IMMEDIATE MYSTR2;
DBMS_OUTPUT.PUT_LINE(STR2);
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX) ||' , '|| FDRIP2(IDX));
END LOOP;
ELSE 
MYSTR2 := 'CREATE TABLE RESULTS_TEMP2 (COL1 VARCHAR2(200), COL2 VARCHAR2(200))';
DBMS_OUTPUT.PUT_LINE(STR2);
EXECUTE IMMEDIATE MYSTR2;
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
STR3 := 'SELECT ' || DB4_COL || ',' || DB4_COLS1 || ' FROM ' || DB4 || ' WHERE ' || DB4_COL2 || OP || "COND";
--STR8 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB4_COL || ',' || DB4_COLS1 || ' FROM ' || DB4 || ' WHERE ' || DB4_COL2 || OP || "COND";
MYSTR3 := 'CREATE TABLE RESULTS_TEMP3 AS ' || STR3;
IF DB4_COL != 'null' THEN
EXECUTE IMMEDIATE STR3 BULK COLLECT INTO FDRIP,FDRIP2;
--EXECUTE IMMEDIATE STR8;
EXECUTE IMMEDIATE MYSTR3;
DBMS_OUTPUT.PUT_LINE(STR3);
ELSE 
MYSTR3:= 'CREATE TABLE RESULTS_TEMP3 (COL1 VARCHAR2(200), COL2 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR3;
DBMS_OUTPUT.PUT_LINE(STR3);
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX) ||' , '|| FDRIP2(IDX));
END LOOP;
END;
/

SELECT * FROM RESULTS_TEMP 
UNION
SELECT * FROM RESULTS_TEMP1
UNION
SELECT * FROM RESULTS_TEMP2
UNION
SELECT * FROM RESULTS_TEMP3;
















SELECT * FROM RESULTS_TEMP ;


SELECT * FROM RESULTS_TEMP1;


SELECT * FROM RESULTS_TEMP2;



SELECT * FROM RESULTS_TEMP3;

---Case 7:Display all titles  of a particular artist where search string for artists  starts with I letter 

SET SERVEROUTPUT ON;
DROP TABLE MY_TEMP_TABLE;
DROP TABLE RESULTS_TEMP;
DROP TABLE RESULTS_TEMP1;
DROP TABLE RESULTS_TEMP2;
DROP TABLE RESULTS_TEMP3;

CREATE TABLE my_temp_table (
  TOKEN_ID INT,
  TOKEN     VARCHAR2(200),
  DESCRIPT  VARCHAR2(300)
);

DROP TABLE METADATA_LAYER_TEMP;

create table metadata_layer_temp(
cannonical_representation varchar2(100),
db1_column_name varchar2(100),
db1_column_data_type varchar2(100),
db1_function_name varchar2(100),
db2_column_name varchar2(100),
db2_column_data_type varchar2(100),
db2_function_name varchar2(100),
db3_column_name varchar2(100),
db3_column_data_type varchar2(100),
db3_function_name varchar2(100),
db4_column_name varchar2(100),
db4_column_data_type varchar2(100),
db4_function_name varchar2(100)
);
DECLARE
QUERYZ VARCHAR2 (400) :=  'SELECT cds_title FROM cds_db WHERE artists LIKE ''l%''';
TOKENS VARCHAR(300);
BEGIN
FOR TOKEN IN (SELECT REGEXP_SUBSTR(QUERYZ,'[^ |,]+',1,LEVEL) TEXTS FROM DUAL
CONNECT BY REGEXP_SUBSTR(QUERYZ,' ',1,LEVEL-1) IS NOT NULL)
LOOP
TOKENS := TOKEN.TEXTS;
INSERT INTO MY_TEMP_TABLE (TOKEN) VALUES(TOKENS);
DBMS_OUTPUT.PUT_LINE(TOKENS);
END LOOP;
END;
/

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'KEYWORD'
WHERE EXISTS (SELECT KEYWORD FROM KEYWORD_TABLE WHERE MY_TEMP_TABLE.TOKEN = KEYWORD_TABLE.KEYWORD);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'TOKEN'
WHERE NOT EXISTS (SELECT KEYWORD FROM KEYWORD_TABLE WHERE MY_TEMP_TABLE.TOKEN = KEYWORD_TABLE.KEYWORD);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'OPERATOR'
WHERE EXISTS (SELECT OPERATOR1 FROM OPERATORS WHERE MY_TEMP_TABLE.TOKEN = OPERATORS.OPERATOR1);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'CONDITION' WHERE DESCRIPT = 'TOKEN' AND
NOT EXISTS (SELECT CANNONICAL_REPRESENTATION FROM METADATA_LAYER WHERE MY_TEMP_TABLE.TOKEN = METADATA_LAYER.CANNONICAL_REPRESENTATION);

DECLARE
V_NAME varchar2(200);
SQL_SMT VARCHAR2(600);
CURSOR MY_CURSOR IS
SELECT TOKEN FROM MY_TEMP_TABLE WHERE DESCRIPT = 'TOKEN';
BEGIN
SQL_SMT := 'INSERT INTO METADATA_LAYER_TEMP SELECT * FROM METADATA_LAYER WHERE :DRIP IN (CANNONICAL_REPRESENTATION,DB1_COLUMN_NAME,DB1_COLUMN_DATA_TYPE,DB1_FUNCTION_NAME,DB2_COLUMN_NAME,DB2_COLUMN_DATA_TYPE,
DB2_FUNCTION_NAME,DB3_COLUMN_NAME,DB3_COLUMN_DATA_TYPE,DB3_FUNCTION_NAME,DB4_COLUMN_NAME,DB4_COLUMN_DATA_TYPE,DB4_FUNCTION_NAME)';
OPEN MY_CURSOR;
LOOP
FETCH MY_CURSOR INTO V_NAME;
EXECUTE IMMEDIATE SQL_SMT USING V_NAME;
EXIT WHEN MY_CURSOR%NOTFOUND;
END LOOP;
CLOSE MY_CURSOR;
END;
/

DELETE FROM
   METADATA_LAYER_TEMP A
WHERE
  a.rowid >
   ANY (
     SELECT
        B.rowid
     FROM
        METADATA_LAYER_TEMP B
     WHERE
        a.cannonical_representation = b.cannonical_representation
     AND
        a.cannonical_representation = b.cannonical_representation
        );

UPDATE MY_TEMP_TABLE SET TOKEN_ID = ROWNUM;

DROP TABLE METADATA_LAYER_TEMP1;

CREATE TABLE METADATA_LAYER_TEMP1 AS (SELECT MY_TEMP_TABLE.*,METADATA_LAYER_TEMP.* FROM MY_TEMP_TABLE LEFT JOIN METADATA_LAYER_TEMP ON MY_TEMP_TABLE.TOKEN = METADATA_LAYER_TEMP.CANNONICAL_REPRESENTATION);


DROP TABLE RESULTS_TABLE1;
CREATE TABLE RESULTS_TABLE1(RESULTS_X VARCHAR2(200),RESULTS_Y VARCHAR2(200));
--single column query--
DECLARE
TYPE OVERSEAS_DRIP IS TABLE OF VARCHAR2(200);
TYPE OVERSEAS_DRIP2 IS TABLE OF VARCHAR2(200);
FDRIP OVERSEAS_DRIP;
FDRIP2 OVERSEAS_DRIP2;
DB1_COL METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2_COL METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3_COL METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4_COL METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_COLS1 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB2_COLS1 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB3_COLS1 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB4_COLS1 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB1 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_COL2 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2_COL2 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3_COL2 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4_COL2 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
OP MY_TEMP_TABLE.TOKEN%TYPE DEFAULT 'DRIP';
COND MY_TEMP_TABLE.TOKEN%TYPE;
STR VARCHAR2(1000);
MYSTR VARCHAR2(1000);
STR1 VARCHAR2(1000);
MYSTR1 VARCHAR2(1000);
STR2 VARCHAR2(1000);
MYSTR2 VARCHAR2(1000);
STR3 VARCHAR2(1000);
MYSTR3 VARCHAR2(1000);
STR5 VARCHAR2(1000);
STR6 VARCHAR2(1000);
STR7 VARCHAR2(1000);
STR8 VARCHAR2(10000);
BEGIN
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COL,DB2_COL,DB3_COL,DB4_COL
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id = 2;
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1,DB2,DB3,DB4
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE = 'table';
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COL2,DB2_COL2,DB3_COL2,DB4_COL2
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id != 2;
SELECT TOKEN
INTO OP
FROM MY_TEMP_TABLE WHERE DESCRIPT = 'OPERATOR';
SELECT TOKEN
INTO COND
FROM MY_TEMP_TABLE WHERE DESCRIPT = 'CONDITION';
IF DB1_COL != 'null' THEN
STR := 'SELECT ' || DB1_COL || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || ' ' || OP || ' ' || "COND";
--STR5 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB1_COL || ',' || DB1_COLS1 || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || OP || "COND";
MYSTR := 'CREATE TABLE RESULTS_TEMP AS ' || STR;
EXECUTE IMMEDIATE STR BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR5;
EXECUTE IMMEDIATE MYSTR;
DBMS_OUTPUT.PUT_LINE(STR);
ELSE DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
MYSTR := 'CREATE TABLE RESULTS_TEMP (COL1 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR;
END IF;
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
STR1 := 'SELECT ' || DB2_COL || ' FROM ' || DB2 || ' WHERE ' || DB2_COL2 || ' ' || OP || ' ' || "COND";
--STR6 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB2_COL || ',' || DB2_COLS1 || ' FROM ' || DB2 || ' WHERE ' || DB2_COL2 || OP || "COND";
MYSTR1 := 'CREATE TABLE RESULTS_TEMP1 AS ' || STR1;
IF DB2_COL != 'null' THEN
EXECUTE IMMEDIATE STR1 BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR6;
EXECUTE IMMEDIATE MYSTR1;
DBMS_OUTPUT.PUT_LINE(STR1);
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
ELSE
MYSTR1 := 'CREATE TABLE RESULTS_TEMP1 (COL1 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR1;
DBMS_OUTPUT.PUT_LINE(STR1);
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
STR2 := 'SELECT ' || DB3_COL || ' FROM ' || DB3 || ' WHERE ' || DB3_COL2 || ' ' || OP || ' ' || "COND";
--STR7 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB3_COL || ',' || DB3_COLS1 || ' FROM ' || DB3 || ' WHERE ' || DB3_COL2 || OP || "COND";
MYSTR2 := 'CREATE TABLE RESULTS_TEMP2 AS ' || STR2;
IF DB3_COL != 'null' THEN
EXECUTE IMMEDIATE STR2 BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR7;
EXECUTE IMMEDIATE MYSTR2;
DBMS_OUTPUT.PUT_LINE(STR2);
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
ELSE 
MYSTR2 := 'CREATE TABLE RESULTS_TEMP2 (COL1 VARCHAR2(200))';
DBMS_OUTPUT.PUT_LINE(STR2);
EXECUTE IMMEDIATE MYSTR2;
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
STR3 := 'SELECT ' || DB4_COL || ' FROM ' || DB4 || ' WHERE ' || DB4_COL2 || ' ' || OP || ' ' || "COND";
--STR8 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB4_COL || ',' || DB4_COLS1 || ' FROM ' || DB4 || ' WHERE ' || DB4_COL2 || OP || "COND";
MYSTR3 := 'CREATE TABLE RESULTS_TEMP3 AS ' || STR3;
IF DB4_COL != 'null' THEN
EXECUTE IMMEDIATE STR3 BULK COLLECT INTO FDRIP;
--EXECUTE IMMEDIATE STR8;
EXECUTE IMMEDIATE MYSTR3;
DBMS_OUTPUT.PUT_LINE(STR3);
ELSE 
MYSTR3:= 'CREATE TABLE RESULTS_TEMP3 (COL1 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR3;
DBMS_OUTPUT.PUT_LINE(STR3);
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX));
END LOOP;
END;
/

SELECT * FROM RESULTS_TEMP 
UNION
SELECT * FROM RESULTS_TEMP1
UNION
SELECT * FROM RESULTS_TEMP2
UNION
SELECT * FROM RESULTS_TEMP3;












SELECT * FROM RESULTS_TEMP ;

SELECT * FROM RESULTS_TEMP1;

SELECT * FROM RESULTS_TEMP2;


SELECT * FROM RESULTS_TEMP3;



----Case 8: Display all titles,price  of a particular artist

SET SERVEROUTPUT ON;
DROP TABLE MY_TEMP_TABLE;
DROP TABLE RESULTS_TEMP;
DROP TABLE RESULTS_TEMP1;
DROP TABLE RESULTS_TEMP2;
DROP TABLE RESULTS_TEMP3;

CREATE TABLE my_temp_table (
  TOKEN_ID INT,
  TOKEN     VARCHAR2(200),
  DESCRIPT  VARCHAR2(300)
);

DROP TABLE METADATA_LAYER_TEMP;

create table metadata_layer_temp(
cannonical_representation varchar2(100),
db1_column_name varchar2(100),
db1_column_data_type varchar2(100),
db1_function_name varchar2(100),
db2_column_name varchar2(100),
db2_column_data_type varchar2(100),
db2_function_name varchar2(100),
db3_column_name varchar2(100),
db3_column_data_type varchar2(100),
db3_function_name varchar2(100),
db4_column_name varchar2(100),
db4_column_data_type varchar2(100),
db4_function_name varchar2(100)
);
DECLARE
QUERYZ VARCHAR2 (400) := 'SELECT cds_title, cds_price FROM cds_db WHERE artists = ''lil_baby''';
TOKENS VARCHAR(300);
BEGIN
FOR TOKEN IN (SELECT REGEXP_SUBSTR(QUERYZ,'[^ |,]+',1,LEVEL) TEXTS FROM DUAL
CONNECT BY REGEXP_SUBSTR(QUERYZ,' ',1,LEVEL-1) IS NOT NULL)
LOOP
TOKENS := TOKEN.TEXTS;
INSERT INTO MY_TEMP_TABLE (TOKEN) VALUES(TOKENS);
DBMS_OUTPUT.PUT_LINE(TOKENS);
END LOOP;
END;
/

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'KEYWORD'
WHERE EXISTS (SELECT KEYWORD FROM KEYWORD_TABLE WHERE MY_TEMP_TABLE.TOKEN = KEYWORD_TABLE.KEYWORD);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'TOKEN'
WHERE NOT EXISTS (SELECT KEYWORD FROM KEYWORD_TABLE WHERE MY_TEMP_TABLE.TOKEN = KEYWORD_TABLE.KEYWORD);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'OPERATOR'
WHERE EXISTS (SELECT OPERATOR1 FROM OPERATORS WHERE MY_TEMP_TABLE.TOKEN = OPERATORS.OPERATOR1);

UPDATE MY_TEMP_TABLE
SET DESCRIPT = 'CONDITION' WHERE DESCRIPT = 'TOKEN' AND
NOT EXISTS (SELECT CANNONICAL_REPRESENTATION FROM METADATA_LAYER WHERE MY_TEMP_TABLE.TOKEN = METADATA_LAYER.CANNONICAL_REPRESENTATION);

DECLARE
V_NAME varchar2(200);
SQL_SMT VARCHAR2(600);
CURSOR MY_CURSOR IS
SELECT TOKEN FROM MY_TEMP_TABLE WHERE DESCRIPT = 'TOKEN';
BEGIN
SQL_SMT := 'INSERT INTO METADATA_LAYER_TEMP SELECT * FROM METADATA_LAYER WHERE :DRIP IN (CANNONICAL_REPRESENTATION,DB1_COLUMN_NAME,DB1_COLUMN_DATA_TYPE,DB1_FUNCTION_NAME,DB2_COLUMN_NAME,DB2_COLUMN_DATA_TYPE,
DB2_FUNCTION_NAME,DB3_COLUMN_NAME,DB3_COLUMN_DATA_TYPE,DB3_FUNCTION_NAME,DB4_COLUMN_NAME,DB4_COLUMN_DATA_TYPE,DB4_FUNCTION_NAME)';
OPEN MY_CURSOR;
LOOP
FETCH MY_CURSOR INTO V_NAME;
EXECUTE IMMEDIATE SQL_SMT USING V_NAME;
EXIT WHEN MY_CURSOR%NOTFOUND;
END LOOP;
CLOSE MY_CURSOR;
END;
/

DELETE FROM
   METADATA_LAYER_TEMP A
WHERE
  a.rowid >
   ANY (
     SELECT
        B.rowid
     FROM
        METADATA_LAYER_TEMP B
     WHERE
        a.cannonical_representation = b.cannonical_representation
     AND
        a.cannonical_representation = b.cannonical_representation
        );

UPDATE MY_TEMP_TABLE SET TOKEN_ID = ROWNUM;

DROP TABLE METADATA_LAYER_TEMP1;

CREATE TABLE METADATA_LAYER_TEMP1 AS (SELECT MY_TEMP_TABLE.*,METADATA_LAYER_TEMP.* FROM MY_TEMP_TABLE LEFT JOIN METADATA_LAYER_TEMP ON MY_TEMP_TABLE.TOKEN = METADATA_LAYER_TEMP.CANNONICAL_REPRESENTATION);


DROP TABLE RESULTS_TABLE1;
CREATE TABLE RESULTS_TABLE1(RESULTS_X VARCHAR2(200),RESULTS_Y VARCHAR2(200));
--single column query--
DECLARE
TYPE OVERSEAS_DRIP IS TABLE OF VARCHAR2(200);
TYPE OVERSEAS_DRIP2 IS TABLE OF VARCHAR2(200);
FDRIP OVERSEAS_DRIP;
FDRIP2 OVERSEAS_DRIP2;
DB1_COL METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2_COL METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3_COL METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4_COL METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_COLS1 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB2_COLS1 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB3_COLS1 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB4_COLS1 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE DEFAULT 'DRIP';
DB1 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_COL2 METADATA_LAYER_TEMP1.DB1_COLUMN_NAME%TYPE;
DB2_COL2 METADATA_LAYER_TEMP1.DB2_COLUMN_NAME%TYPE;
DB3_COL2 METADATA_LAYER_TEMP1.DB3_COLUMN_NAME%TYPE;
DB4_COL2 METADATA_LAYER_TEMP1.DB4_COLUMN_NAME%TYPE;
DB1_FUNC METADATA_LAYER_TEMP1.DB4_FUNCTION_NAME%TYPE;
OP MY_TEMP_TABLE.TOKEN%TYPE DEFAULT 'DRIP';
COND MY_TEMP_TABLE.TOKEN%TYPE;
STR VARCHAR2(1000);
MYSTR VARCHAR2(1000);
STR1 VARCHAR2(1000);
MYSTR1 VARCHAR2(1000);
STR2 VARCHAR2(1000);
MYSTR2 VARCHAR2(1000);
STR3 VARCHAR2(1000);
MYSTR3 VARCHAR2(1000);
STR5 VARCHAR2(1000);
STR6 VARCHAR2(1000);
STR7 VARCHAR2(1000);
STR8 VARCHAR2(10000);
FINALSTR VARCHAR2(140);
FINALSTR2 VARCHAR2(140);
BEGIN
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COL,DB2_COL,DB3_COL,DB4_COL
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id = 2;
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COLS1,DB2_COLS1,DB3_COLS1,DB4_COLS1
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id = 3;
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1,DB2,DB3,DB4
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE = 'table';
SELECT DB1_COLUMN_NAME,DB2_COLUMN_NAME,DB3_COLUMN_NAME,DB4_COLUMN_NAME
INTO
DB1_COL2,DB2_COL2,DB3_COL2,DB4_COL2
FROM METADATA_LAYER_TEMP1 WHERE DB1_COLUMN_DATA_TYPE != 'table' and token_id != 2 and token_id != 3;
SELECT TOKEN
INTO OP
FROM MY_TEMP_TABLE WHERE DESCRIPT = 'OPERATOR';
SELECT DB1_FUNCTION_NAME
INTO DB1_FUNC
FROM METADATA_LAYER_TEMP1 WHERE TOKEN_ID = 3;
SELECT TOKEN
INTO COND
FROM MY_TEMP_TABLE WHERE DESCRIPT = 'CONDITION';
IF DB1_COL != 'null'  AND DB1_FUNC = 'null' THEN
STR := 'SELECT ' || DB1_COL || ',' || DB1_COLS1 || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || OP || "COND";
--STR5 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB1_COL || ',' || DB1_COLS1 || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || OP || "COND";
MYSTR := 'CREATE TABLE RESULTS_TEMP AS ' || STR;
EXECUTE IMMEDIATE STR BULK COLLECT INTO FDRIP, FDRIP2;
--EXECUTE IMMEDIATE STR5;
EXECUTE IMMEDIATE MYSTR;
DBMS_OUTPUT.PUT_LINE(STR);
ELSIF DB1_COL != 'null' AND DB1_FUNC != 'null' THEN
FINALSTR := 'SELECT ' || DB1_COL || ',' || DB1_FUNC || ' FROM ' || DB1 || ' WHERE ' || DB1_COL2 || OP || "COND";
FINALSTR2 := 'CREATE TABLE RESULTS_TEMP AS ' || FINALSTR;
EXECUTE IMMEDIATE FINALSTR2;
EXECUTE IMMEDIATE FINALSTR BULK COLLECT  INTO FDRIP, FDRIP2;
DBMS_OUTPUT.PUT_LINE(FINALSTR);
ELSE DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
MYSTR := 'CREATE TABLE RESULTS_TEMP (COL1 VARCHAR2(200), COL2 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR;
END IF;
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX) ||' , '|| FDRIP2(IDX));
END LOOP;
STR1 := 'SELECT ' || DB2_COL || ',' || DB2_COLS1 || ' FROM ' || DB2 || ' WHERE ' || DB2_COL2 || OP || "COND";
--STR6 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB2_COL || ',' || DB2_COLS1 || ' FROM ' || DB2 || ' WHERE ' || DB2_COL2 || OP || "COND";
MYSTR1 := 'CREATE TABLE RESULTS_TEMP1 AS ' || STR1;
IF DB2_COL != 'null' THEN
EXECUTE IMMEDIATE STR1 BULK COLLECT INTO FDRIP,FDRIP2;
--EXECUTE IMMEDIATE STR6;
EXECUTE IMMEDIATE MYSTR1;
DBMS_OUTPUT.PUT_LINE(STR1);
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX) ||' , '|| FDRIP2(IDX));
END LOOP;
ELSE
MYSTR1 := 'CREATE TABLE RESULTS_TEMP1 (COL1 VARCHAR2(200), COL2 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR1;
DBMS_OUTPUT.PUT_LINE(STR1);
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
STR2 := 'SELECT ' || DB3_COL || ',' || DB3_COLS1 || ' FROM ' || DB3 || ' WHERE ' || DB3_COL2 || OP || "COND";
--STR7 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB3_COL || ',' || DB3_COLS1 || ' FROM ' || DB3 || ' WHERE ' || DB3_COL2 || OP || "COND";
MYSTR2 := 'CREATE TABLE RESULTS_TEMP2 AS ' || STR2;
IF DB3_COL != 'null' THEN
EXECUTE IMMEDIATE STR2 BULK COLLECT INTO FDRIP,FDRIP2;
--EXECUTE IMMEDIATE STR7;
EXECUTE IMMEDIATE MYSTR2;
DBMS_OUTPUT.PUT_LINE(STR2);
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX) ||' , '|| FDRIP2(IDX));
END LOOP;
ELSE 
MYSTR2 := 'CREATE TABLE RESULTS_TEMP2 (COL1 VARCHAR2(200), COL2 VARCHAR2(200))';
DBMS_OUTPUT.PUT_LINE(STR2);
EXECUTE IMMEDIATE MYSTR2;
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
STR3 := 'SELECT ' || DB4_COL || ',' || DB4_COLS1 || ' FROM ' || DB4 || ' WHERE ' || DB4_COL2 || OP || "COND";
--STR8 := 'INSERT INTO RESULTS_TABLE1 ' || 'SELECT ' || DB4_COL || ',' || DB4_COLS1 || ' FROM ' || DB4 || ' WHERE ' || DB4_COL2 || OP || "COND";
MYSTR3 := 'CREATE TABLE RESULTS_TEMP3 AS ' || STR3;
IF DB4_COL != 'null' THEN
EXECUTE IMMEDIATE STR3 BULK COLLECT INTO FDRIP,FDRIP2;
--EXECUTE IMMEDIATE STR8;
EXECUTE IMMEDIATE MYSTR3;
DBMS_OUTPUT.PUT_LINE(STR3);
ELSE 
MYSTR3:= 'CREATE TABLE RESULTS_TEMP3 (COL1 VARCHAR2(200), COL2 VARCHAR2(200))';
EXECUTE IMMEDIATE MYSTR3;
DBMS_OUTPUT.PUT_LINE(STR3);
DBMS_OUTPUT.PUT_LINE('NO TABLE OR RELEVANT COLUMN');
END IF;
FOR IDX IN 1..FDRIP.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(IDX ||' , '|| FDRIP(IDX) ||' , '|| FDRIP2(IDX));
END LOOP;
END;
/


SELECT * FROM RESULTS_TEMP 
UNION
SELECT * FROM RESULTS_TEMP1
UNION
SELECT * FROM RESULTS_TEMP2
UNION
SELECT * FROM RESULTS_TEMP3;












SELECT * FROM RESULTS_TEMP ;

SELECT * FROM RESULTS_TEMP1;

SELECT * FROM RESULTS_TEMP2;


SELECT * FROM RESULTS_TEMP3;

